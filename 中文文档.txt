PHG语法文档
术语:
阵列 []
队列<>
立即语句()
定义{}
继承[a],=a, 
属性 p:1，2，3;
特性a[ vis=true;}特性不能被继承
简介:
Phg是由噬菌体命名的一门极简主义编程语言。
本语言结合群论的思想，在其宿主程序里对变量元素与运算进行自定义重载。
{PHG}是用于描述节点结构的特化PHG，是一种描述性语言。它描述的节点可以赋予任意含义，比如三维场景节点，二维精灵节点等。内部结合了一些特别的语法以及内嵌PHG语句可以用最简单的文本描述复杂场景。
运算式编程与群论:
 • 在人工智能的经验主义的对面是传统的数学运算体系， 群论是最有代表性的。
 • 群论是为了解决三次方程一般性求根问题引入的。 随着外尔与杨振宁等把群论引入物理学， 为规范场 论以及后来的标准模型奠定了数学基础， 群论也在各个领域内大放异彩。 
• 群论也在皮亚杰等人的努力下建立了一套哲学体系（参看《结构主义》）。
 • 为了能够在编程领域应用， 我们不能停留在群伦的数学精确而狭窄的定义上。按照皮亚杰等人的理论 ， 群被广义化扩展为一个由元素跟运算组成的封闭的形式系统。 
 其鲜明的特点：
 • 1 ， 元素与运算是相对的， 即所有的元素都是可以通过运算产生的；
 • 2 ， 元素是可以自行定义， 不拘泥于纯数学对象； 
 • 3 ， 运算是可以自行定义的， 不拘泥于数学运算； 
基于此可以从中提取一些可以应用与编程领域的思路：
 1. 给定的编程问题（或者经过合理拆分后， 每个子问题）可以看成是一个群； 
2. 编程领域的类对象可以作为元素； 
3 .运算重载可以作为运算自定义的方法 ；
利用好对称性，基于群论的微脚本:
 • 引入群论的意义在于提取实际编程问题背后隐含的对称性， 群论的诞生本身以及在各个领域里的应用 也是基于这个目的。 在具体方法上需要把问题抽象为元素与运算， 然后利用计算机来进行运算生成其 他的群元素。 在此过程中根据对称性原则诸如逆运算， 以及其他领域里比较通用的运算如共轭， 可以 引入进来跟具体问题寻找一定的对应关系， 从而用群的结构来重新建构问题。 
语法介绍
 条件语句：
  ?(expr){ statement }:{ # else statement } 
  ?(expr) statement1; : statement2; 
 循环语句：
  @n{ statement1 ?(_i = x) ˜;statement2 }
                   #_i 为循环内部游标 break 

函数： 
  $function(args...) { statement $return }
{PHG}语法
名称 : { 
继承 节点名 , 
特性 = 值;
属 性: 值;
名称 : { 子节点 } 
? 选择子 [ a:{},{b},c] #阵列
<a,b,c> #队列
Phg/onevent ： PHG 表达 式
 }
语法之 序列 与 阵列:
 • 序列 是 指 有 顺序 的 N 元组， 序列 本 身 可以 作 为元素 参 与 四 则运算 <a,b,c,d> 序列 跟节点 表达 式的 关 系 公 式： <a,b,c,d> = {a{b{c{d}}}} 
 • 阵列 是数组的 概念 ， 也可以 按照集 合论进行布尔运算 [ a,b,c,d] = {{a}{b}{c}{d}}
与宿主语言结合:
PHG node element entity 
