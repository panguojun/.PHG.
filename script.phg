{# script for 3d modeling 
  a0{md:spine2;z:12;s:10}
  a{a0,s:2.1;seg:2;
    {md:gear;y:-4;yaw:90;s:1.25}
    {md:wingr;y:4;yaw:90;s:1.25}
  }
  b{md:pipe1;z:5}
  w1{b,pit:90;
    {md:wheel;x:2;rol:90;s:2}}
  w2{b,yaw:90;
    {md:wheel;x:2;rol:90;s:2}}
  dan{md:unkown;s:(rnd(52)/3.0);
    x:(rnd(55)-rnd(55));
    y:(rnd(25)-rnd(175));
    z:(rnd(75)-rnd(75))}
  tree{md:tree3;
    y:-20;s:550;pit:90}

  this{z:-5;s:0.3;y:-20
    {s:2;y:15;
      [{a},a,a,a,a,a,a,
      a,a,a,a,a,a,a,a,a,a,a,a]}

    {md:liandanlu1;y:-150;s:20;pit:90}
    {y:50;[dan,dan,dan,dan,dan,dan,dan]}
    {tree,md:tree7}
  }
}
doexpr();setup('entity');tojson('this');
#########################################################
{a{yaw:(-30 + _t * 5);x:4;s:0.9;
	{md:pipe1;yaw:90}
	{md:gear;y:2;s:0.5;pit:90}
	{md:gear;y:-2;s:0.5;pit:90}}
b{<a,a,a,a,a,a,a,a,a>}	
(doexpr())
c{b,rol:45}
d{<c,c,c,c,c,c,c,c>}
this{s:3;y:0;
d
}}

doexpr();setup('entity');tojsn('this');
#########################################################
{# 节点描述代码
	(echo(0))					  # 立即执行的嵌入语句
	sig{						    # 定义一个体节节点
		md:spine1; 				# 模型
		x:1; 					    # x坐标
		y:(_i * 0.2) 			# y坐标的表达式，_i是子节点的序号
		z:(rnd(1.0)-rnd(1.0));	# z坐标的表达式,rnd为随机函数
		fi: 45;					        # 节点的相位，在运动时使用
			a{md:wheel;z:-1} 	    # 子节点a
			{md:wheel;z:1}  	    # 匿名子节点
	}
	showthis{					        # 此节点用于显示
		x:-1;y:-10;				
		[						            # 阵列式创建子节点，子节点之间为兄弟关系
		{sig,md:head}			      # 子节点匿名，继承sig的属性，并且修改模型属性
		sig,sig,sig,sig,sig,sig,sig,sig]
			
		<sig,sig,sig,sig,sig>	  # 序列式创建，节点之间为父子关系
	}
}
# 函数入口代码
expr(); 						        # 执行节点中的内嵌代码
setup('entity');				    # 按照实体方式解析节点树
dump();							        # 打印整个节点树
tojson('showthis');			    # 转化为json用于传输
